
Базовый синтаксис
$(селектор).действие()

Метод $(document).ready() позволяет выполнять функцию, когда документ полностью загружен.

Примеры jQuery селекторов

$("*")	        Выбирает все элементы
$(this)	        Выбирает текущий HTML элемент
$("p.intro")	Выбирает все элементы <p> с атрибутом class="intro"
$("p:first")	Выбирает первый элемент <p>
$("ul li:first")	Выбирает первый элемент <li> первого элемента <ul>
$("ul li:first-child")	Выбирает первый элемент <li> каждого элемента <ul>
$("[href]")	            Выбирает все элементы с атрибутом href
$("a[target='_blank']")	    Выбирает все элементы <a>, значение атрибута target которых равно "_blank"
$("a[target!='_blank']")	Выбирает все элементы <a>, значение атрибута target которых не равно "_blank"
$(":button")	Выбирает все элементы <button>, а также элементы <input> с атрибутом type="button"
$("tr:even")	Выбирает все четные элементы <tr>
$("tr:odd")	    Выбирает все нечетные элементы <tr>

Некоторые общие события DOM:

События мыши    События клавиатуры  События формы   События документа/окна
click           keypress            submit          load
dblclick        keydown             change          resize
mouseenter      keyup               focus           scroll
mouseleave      blur                unload

$("p").click(function(){
  // здесь идет реакция на событие!!
});

Ещё методы
hover()
focus()
blur()
on()


АНИМАЦИЯ

Скрыть, показать

$(селектор).hide(speed,callback);
$(селектор).show(speed,callback);
$(селектор).toggle(speed,callback);

$("button").click(function(){
   $("p").hide(1000);
});

$("button").click(function(){
   $("p").toggle();
});

Затемнение

$(селектор).fadeIn(speed,callback);
$(селектор).fadeOut(speed,callback);
$(селектор).fadeToggle(speed,callback);
$(селектор).fadeTo(speed,opacity,callback);

$("button").click(function(){
  $("#div1").fadeIn();
  $("#div2").fadeOut("slow");
  $("#div3").fadeToggle(3000);
});

$("button").click(function(){
  $("#div1").fadeTo("slow", 0.15);
  $("#div2").fadeTo("slow", 0.4);
   $("#div3").fadeTo("slow", 0.7);
});

Сворачивание

$(селектор).slideDown(speed,callback);
$(селектор).slideUp(speed,callback);
$(селектор).slideToggle(speed,callback);

$("#flip").click(function(){
   $("#panel").slideUp();
});

Анимация (пользовательская)

$(селектор).animate({params},speed,callback);

$("button").click(function(){
  $("div").animate({left: '250px'});
});

$("button").click(function(){
   $("div").animate({
     left: '250px',
     opacity: '0.5',
     height: '150px',
     width: '150px'
  });
});
использование относительных значений
$("button").click(function(){
  $("div").animate({
     left: '250px',
     height: '+=150px',
     width: '+=150px'
  });
});
Использование предопределенных значений "show", "hide" или "toggle"
$("button").click(function(){
   $("div").animate({
     height: 'toggle'
   });
});
Использование функциональной последовательности
$("button").click(function(){
  var div = $("div");
  div.animate({height: '300px', opacity: '0.4'}, "slow");
  div.animate({width: '300px', opacity: '0.8'}, "slow");
  div.animate({height: '100px', opacity: '0.4'}, "slow");
  div.animate({width: '100px', opacity: '0.8'}, "slow");
});

Прерывание анимации
$(селектор).stop(stopAll,goToEnd);

$("#stop").click(function(){
  $("#panel").stop();
});

Функция обратного вызова
выполняется после того, как текущий эффект полностью завершился.

$(селектор).hide(speed,callback);

$("button").click(function(){
  $("p").hide("slow", function(){
     alert("Параграф теперь скрыт");
  });
});

Цепочки jQuery

$("#p1").css("color", "red").slideUp(2000).slideDown(2000);

$("#p1").css("color", "red")
  .slideUp(2000)
  .slideDown(2000);


jQuery - Работа с HTML


Получение контента - text(), html(), val()

text() - устанавливает или возвращает текстовое содержимое выбранных элементов
html() - устанавливает или возвращает содержимое выбранных элементов (включая разметку HTML)
val() - устанавливает или возвращает значение полей форм

$("#btn1").click(function(){
  alert("Text: " + $("#test").text());
});
$("#btn2").click(function(){
  alert("HTML: " + $("#test").html());
});

Получение атрибутов - attr()
jQuery метод attr() позволяет получить значения атрибутов.
Следующий пример демонстрирует как получить значение атрибута href заданной ссылки:

$("button").click(function(){
  alert($("#w3s").attr("href"));
});

Установка контента и атрибутов

text() - устанавливает или возвращает текстовое содержимое выбранных элементов
html() - устанавливает или возвращает содержимое выбранных элементов (включая разметку HTML)
val() - устанавливает или возвращает значение полей форм

$("#btn1").click(function(){
  $("#test1").text("Hello world!");
});
$("#btn2").click(function(){
  $("#test2").html("<b>Hello world!</b>");
});
$("#btn3").click(function(){
   $("#test3").val("Dolly Duck");
});

Функция обратного вызова в методах text(), html() и val()

Функция обратного вызова имеет два параметра: индекс текущего элемента в списке отобранных элементов и исходное (старое) значение.
Из функции вы можете вернуть строку, которая будет использоваться как новое значение.

$("#btn1").click(function(){
  $("#test1").text(function(i, origText){
     return "Старый текст: " + origText + " Новый текст: Hello world!
     (index: " + i + ")";
  });
});

$("#btn2").click(function(){
  $("#test2").html(function(i, origText){
     return "Старый html: " + origText + " Новый html: Hello <b>world!</b>
     (index: " + i + ")";
  });
});

Функция обратного вызова в методе attr()

$("button").click(function(){
  $("#w3s").attr("href", function(i, origValue){
    return origValue + "/jquery/";
  });
});


Добавление элементов

append() - Вставляет контент в конец отобранных элементов
prepend() - Вставляет контент в начало отобранных элементов
after() - Вставляет контент после отобранных элементов
before() - Вставляет контент перед отобранными элементами

$("p").append("Присоединенный в конец текст.");
$("p").prepend("Присоединенный в начало текст.");

можно вставлять сразу несколько
$("body").append(txt1, txt2, txt3);

$("img").after("Текст после элемента");
$("img").before("Текст перед элементом");


Удаление элементов

remove() - удаляет отобранный элемент (и его дочерние элементы)
empty() - удаляет дочерние элементы отобранного элемента

jQuery метод remove() удаляет отобранные элементы (и его дочерние элементы).

$("#div1").remove();

jQuery метод empty() удаляет дочерние элементы отобранных элементов.

$("#div1").empty();

Фильтрация удаляемых элементов

В следующем примере удаляются все элементы <p> с атрибутом class="test":
$("p").remove(".test");

В следующем примере удаляются все элементы <p> с атрибутом class="test" или class="demo":
$("p").remove(".test, .demo");


Манипулирование классами CSS

addClass() - добавляет один или несколько классов отобранным элементам
removeClass() - удаляет один или несколько классов у отобранных элементов
toggleClass() - добавляет или удаляет класс(ы) по принципу переключателя (добавляет, если элемент не содержит класса, и удаляет, если класс есть)
css() - возвращает или устанавливает значение атрибута style

$("button").click(function(){
  $("h1, h2, p").addClass("blue");
   $("div").addClass("important");
});

Также, в методе addClass() можно задавать несколько классов:
$("button").click(function(){
   $("#div1").addClass("important blue");
});

$("button").click(function(){
  $("h1, h2, p").removeClass("blue");
});

$("button").click(function(){
  $("h1, h2, p").toggleClass("blue");
});

Возвращение CSS свойства

css("имя_свойства");

$("p").css("background-color");

Установка CSS свойства

css("имя_свойства", "значение");

$("p").css("background-color", "yellow");

Установка нескольких CSS свойств

css({"имя_свойства":"значение","имя_свойства":"значение",...});

$("p").css({"background-color": "yellow", "font-size": "200%"});


Размеры элемента

width()
height()
innerWidth()
innerHeight()
outerWidth()
outerHeight()

Метод width() устанавливает или возвращает ширину элемента (исключая значения padding, border и margin).
Метод innerWidth() возвращает ширину элемента (включая значения padding).
Метод outerWidth() возвращает, так называемую, наружную ширину элемента (включая значения padding и border).
Обращение к методу с параметром outerWidth(true) возвращает ширину элемента, включая значения padding, border и margin.


jQuery - Обход элементов

Метод parent() возвращает непосредственный родительский элемент выбранного элемента.
Метод parents() возвращает все родительские элементы вплоть до корневого (<html>) выбранного элемента.
Метод parentsUntil() возвращает все родительские элементы между двумя заданными элементами.

В следующем примере возвращаются все родительские элементы между элементами <span> и <div>:

$(document).ready(function(){
  $("span").parentsUntil("div");
});

Метод children() возвращает все прямые потомки выбранного элемента.
Также, можно указать необязательный параметр, чтобы фильтровать поиск потомков.

$(document).ready(function(){
  $("div").children("p.first");
});

Метод find() возвращает все потомки выбранного элемента вплоть до последнего.
В следующем примере возвращаются все элементы <span>, которые являются потомками элементов <div>:

$(document).ready(function(){
  $("div").find("span");
});

В следующем примере возвращаются вообще все потомки элементов <div>:
$(document).ready(function(){
  $("div").find("*");
});

Метод siblings() возвращает все элементы, находящиеся на одном уровне с выбранным элементом.
Метод next() возвращает следующий соседний элемент от выбранного элемента
Метод nextAll() возвращает все следующие соседние элементы от выбранного элемента.
Метод nextUntil() возвращает все следующие соседние элементы между двумя заданными аргументами.
В следующем примере возвращаются все соседние элементы между элементами <h2> и <h6>:

$(document).ready(function(){
  $("h2").nextUntil("h6");
});

Методы prev(), prevAll() и prevUntil() работают аналогично.


Фильтрация

Метод first() возвращает первый элемент из заданного набора.
Метод last() возвращает последний элемент из заданного набора.
Метод eq() возвращает элемент с определенным индексным номером в отобранном наборе элементов, отсчет с нуля.
Метод filter() позволяет задавать критерий фильтрации.

$(document).ready(function(){
  $("p").filter(".intro");
});

Метод not() возвращает все элементы, которые не соответствуют заданным критериям, противоположность методу filter().


jQuery - AJAX

Метод load() загружает данные с сервера и помещает их в выбранный элемент.

$(селектор).load(URL,data,callback);

В следующем примере загружается содержимое файла "demo_test.txt" в элемент с идентификатором "div1":
$("#div1").load("demo_test.txt");

В следующем примере загружается содержимое элемента с идентификатором id="p1" в файле "demo_test.txt" в элемент с идентификатором "div1":
$("#div1").load("demo_test.txt #p1");

Необязательный параметр callback определяет функцию обратного вызова, которая будет запускаться, когда метод load() закончит свою работу.
Эта функция может иметь следующие параметры:
responseTxt – содержит полученный контент, если запрос удался
statusTxt – содержит статус запроса
xhr – содержит объект XMLHttpRequest

В следующем примере по окончании работы метода load() на экран выводится окно с сообщением.
Если метод load() завершился успешно, то будет выведено сообщение "Внешние данные успешно загружены!",
если же запрос не удался, то будет выведено сообщение с ошибкой:
$("button").click(function(){
  $("#div1").load("demo_test.txt", function(responseTxt, statusTxt, xhr){
     if(statusTxt == "success")
       alert("Внешние данные успешно загружены!");
     if(statusTxt == "error")
       alert("Error: " + xhr.status + ": " + xhr.statusText);
   });
});


Метод $.get() запрашивает данные с сервера используя HTTP запрос типа GET.

$.get(URL,callback);

$("button").click(function(){
  $.get("demo_test.asp", function(data, status){
    alert("Data: " + data + "\nStatus: " + status);
  });
});


Метод $.post() запрашивает данные с сервера используя HTTP запрос типа POST.

$.post(URL,data,callback);

$("button").click(function(){
  $.post("demo_test_post.asp",
   {
     name: "Donald Duck",
     city: "Duckburg"
   },
   function(data, status){
    alert("Data: " + data + "\nStatus: " + status);
   });
});


